[build-system]
requires = ["oldest-supported-numpy", "setuptools>=58.0.3"]
build-backend = "setuptools.build_meta"

[project]
name = "matcalc"
authors = [
    { name = "Eliott Liu", email = "elliottliu17@gmail.com" },
    { name = "Janosh Riebesell", email = "janosh@lbl.gov" },
    { name = "Ji Qi", email = "j1qi@ucsd.edu" },
    { name = "Shyue Ping Ong", email = "ongsp@ucsd.edu" },
    { name = "Tsz Wai Ko", email = "t1ko@ucsd.edu" },
]
description = "Calculators for materials properties from the potential energy surface."
readme = "README.md"
requires-python = ">=3.9"
keywords = [
    "AI",
    "deep learning",
    "force field",
    "graph",
    "interatomic potential",
    "machine learning",
    "materials",
    "property prediction",
    "science",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Physics",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = ["ase", "joblib", "phonopy", "pymatgen"]
version = "0.0.3"

[project.optional-dependencies]
models = ["chgnet", "mace@git+https://github.com/ACEsuit/mace", "matgl>=0.9.0"]

[tool.setuptools]
packages = ["matcalc"]

[tool.ruff]
target-version = "py39"
line-length = 120
select = [
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "D",    # pydocstyle
    "E",    # pycodestyle error
    "EXE",  # flake8-executable
    "F",    # pyflakes
    "I",    # isort
    "ICN",  # flake8-import-conventions
    "ISC",  # flake8-implicit-str-concat
    "PD",   # pandas-vet
    "PERF", # perflint
    "PIE",  # flake8-pie
    "PL",   # pylint
    "PT",   # flake8-pytest-style
    "PYI",  # flakes8-pyi
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "RSE",  # flake8-raise
    "RUF",  # Ruff-specific rules
    "SIM",  # flake8-simplify
    "SLOT", # flake8-slots
    "TCH",  # flake8-type-checking
    "TID",  # tidy imports
    "TID",  # flake8-tidy-imports
    "UP",   # pyupgrade
    "W",    # pycodestyle warning
    "YTT",  # flake8-2020
]
ignore = [
    "B019",    # functools.lru_cache on methods can lead to memory leaks
    "D105",    # Missing docstring in magic method
    "D205",    # 1 blank line required between summary line and description
    "D212",    # Multi-line docstring summary should start at the first line
    "PLR",     # pylint refactor
    "PLW0603", # Using the global statement to update variables is discouraged
    "SIM105",  # Use contextlib.suppress(OSError) instead of try-except-pass
]
pydocstyle.convention = "google"
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tasks.py" = ["D"]
"tests/*" = ["D"]

[tool.pytest.ini_options]
addopts = "--durations=30 --quiet -rXs --color=yes -p no:warnings"

[tool.mypy]
ignore_missing_imports = true
explicit_package_bases = true
no_implicit_optional = false
exclude = ['examples', 'tests']

[[tool.mypy.overrides]]
module = ["requests.*", "tabulate.*"]
ignore_missing_imports = true

[tool.codespell]
ignore-words-list = "mater,te,nd"
check-filenames = true

[tool.coverage.run]
relative_files = true

[tool.coverage.report]
exclude_lines = [
    "@deprecated",
    "def __repr__",
    "except PackageNotFoundError:",
    "if 0:",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
    "if self.debug:",
    "if settings.DEBUG",
    "input",
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
]
